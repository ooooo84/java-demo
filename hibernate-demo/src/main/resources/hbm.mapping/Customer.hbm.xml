<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<!--
  Mapping文件帮助文档：https://docs.jboss.org/hibernate/orm/5.0/manual/en-US/html/ch05.html

  hibernate-mapping标签的属性：
  package：给class节点对应的类统一设置包名，这样在class里就不再需要写包名
  schema：数据库 schema 的名称
  catalog：数据库 catalog 的名称
  default-cascade：默认的级联关系，默认为none
  default-access：Hibernate 用户访问属性的策略
  default-lazy：指定了未明确注明 lazy 属性的Java属性和集合类，Hibernate会采用什么样的加载风格，默认为 true
  auto-import：指定是否可以在查询语句中使用非全限定类名，默认为 true。
    如果项目中有两个同名的持久化类，最好在这两个类的对应映射文件中配置为 false
 -->
<hibernate-mapping package="com.kingwang.study.entity">
    <!--
      class标签的属性：
      name：实体类名
      table：数据表名
      schema：数据库 schema 的名称，会覆盖 hibernate-mapping 标签上的对应配置
      catalog：数据库 catalog 的名称，会覆盖 hibernate-mapping 标签上的对应配置
      proxy：指定一个接口，在延迟加载时作为代理使用
      dynamic-update：动态更新。为null的字段不在更新SQL中出现。默认为false
      dynamic-insert：动态添加。为null的字段不在插入SQL中出现。默认为false
      where：查询时给SQL添加的默认查询条件
     -->
    <class name="Customer" table="customer" lazy="true">
        <id name="id" type="java.lang.String">
            <!-- 如果是变长字符，sql-type中必须包含长度 -->
            <column name="id" sql-type="varchar(36)"/>
        </id>
        <property name="name" type="java.lang.String">
            <column name="name" sql-type="varchar(50)" not-null="true"/>
        </property>
        <!-- 配置一对多关系
          lazy属性指定是否启用延迟加载，默认为true，
            设置为false时禁用延迟加载，也可以设置为extra，它是比true更加智能的一种加载方式，
            但是不能默认就设置为extra，因为如果使用场景不总是获取count的话，可能性能会更低

          inverse属性设置是否将维护权交给另一方，默认为false，双方都在维护可能会导致性能降低（会执行多余的Update语句）。
            通常在一对多的关系配置中，多方是无法放弃关系维护权的，建议放弃一方的维护权
        -->
        <set name="orders" table="cust_order" lazy="true" inverse="true">
            <key column="customer_id"/>
            <one-to-many class="CustomerOrder"/>
        </set>
    </class>
</hibernate-mapping>