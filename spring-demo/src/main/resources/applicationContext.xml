<?xml version="1.0" encoding="UTF-8"?>
<!--
  Spring XML配置文件的命名空间：
  1. 默认命名空间（使用时不需要加前缀）：beans。提供以下标签：
     <beans>：可以配置多套环境，配合spring.profiles.active配置进行自动切换
     <bean>：配置bean
     <import>：导入其它配置文件
     <alias>：给bean起别名
  2. 外部命名空间（使用时需要加前缀）：
     context
     aop
     mvc
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="com.kingwang.study"/>

    <!--
      Spring XML配置中常用的Bean配置：
      1. <bean id="" class="">：Bean的id和全限定名配置，如果不配置id，则会把当前Bean的全限定类名作为name
      2. <bean name="">：通过name设置Bean的别名，通过别名也能直接获取到Bean实例，可以为bean指定多个别名，通过逗号分隔
      3. <bean scope="singleton|prototype">：Bean的作用范围，BeanFactory作为容器时取值singleton和prototype，默认为singleton
      4. <bean lazy-init="false|true">：Bean的实例化时机，是否延迟加载。BeanFactory作为容器时无效
      5. <bean init-method="">：Bean实例化后自动执行的初始化方法，method指定方法名。
         注：当bean实现了InitializingBean接口时，接口提供的afterPropertiesSet()方法早于init-method配置的方法执行
      6. <bean destroy-method="">：Bean实例销毁前的方法，method指定方法名，只有容器关闭时才能被正确调用
      7. <bean autowire="byType|byName">：设置自动注入模式，常用的有按照类型byType，按照名字byName
      8. <bean factory-bean="" factory-method="">：指定哪个工厂Bean的哪个方法完成Bean的创建
      -->

    <!--
      Bean的依赖注入方式：
      1. 通过Bean的set方法注入：<property name="userDao" ref="userDao"/>或<property name="username" name="king"/>
      2. 通过构造bean的方法进行注入：<constructor-arg name="userDao" ref="userDao"/>或<constructor-arg name="username" value="king"/>

      如何注入集合类（List、Set、Map、Properties）属性：

     -->

    <!-- 配置UserServiceImpl -->
    <bean id="userService" class="com.kingwang.study.service.impl.UserServiceImpl">
        <!-- 使用有参构造，只要是构造bean时使用的参数，都使用constructor-arg进行配置 -->
        <constructor-arg name="name" value="UserService"/>
        <property name="userDao" ref="userDao"/>
    </bean>

    <bean id="userDao" class="com.kingwang.study.dao.impl.UserDaoImpl"/>

    <!-- 配置UserDaoImpl -->
    <bean id="userService1" class="com.kingwang.study.service.impl.UserServiceImpl">
        <!-- 注入普通的字符串List，如果元素是复杂类型，可以使用<bean>或<ref> -->
        <property name="stringList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <!-- 注入Set时，将<list>替换为<set> -->
        <property name="stringSet">
            <set>
                <value>1</value>
                <value>2</value>
                <value>3</value>
            </set>
        </property>
        <!-- 注入Map时，将<list>替换为<map>，其下使用<entry key="" value="" key-ref="" value-ref=""> -->
        <property name="stringMap">
            <map>
                <entry key="1" value="1"/>
                <entry key="2" value="2"/>
                <entry key="3" value="3"/>
            </map>
        </property>
        <!-- 注入Properties时，将<list>替换为<props>，其下使用<prop> -->
        <property name="properties">
            <props>
                <prop key="p1">ppp1</prop>
                <prop key="p2">ppp2</prop>
            </props>
        </property>
    </bean>

    <!-- 当配置第三方的Bean时，可以综合使用静态工厂方法和实例工厂方法进行Bean的配置（例如JDBC/Druid/HikariCP） -->
    <!-- 静态工厂方法创建Bean，class指定工厂类，factory-method指定工厂方法名称，constructor-arg设置工厂方法的参数 -->
    <bean id="userDao1" class="com.kingwang.study.factory.MyBeanFactory1" factory-method="userDao">
        <constructor-arg name="username" value="userDao1"/>
    </bean>
    <!-- 实例工厂方法创建bean，需要先配置工厂对象，然后通过factory-bean和factory-method方法进行配置 -->
    <bean id="myBeanFactory2" class="com.kingwang.study.factory.MyBeanFactory2"/>
    <bean id="userDao2" factory-bean="myBeanFactory2" factory-method="userDao"/>
    <!-- FactoryBean<T>方式创建bean（延迟创建） -->
    <bean id="userDao3" class="com.kingwang.study.factory.MyBeanFactory3"/>
</beans>